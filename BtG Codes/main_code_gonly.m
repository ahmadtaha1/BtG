% Author: Ankur Pipri
% Date: 19th April 2017
% This code simulates the decoupled grid only MPC problem
% Important Initializations
clear;
close all;
clc;
tic;                  % to check the code execution time for the simulation
clear global test sys_g sys_b sys_dg sys_db gear cost_n limit_n P1 P2 P3 Result objective;
global       test sys_g sys_b sys_dg sys_db gear cost_n limit_n P1 P2 P3 Result objective;

% Selecting the test case to be simulated
% test=case9(2.1);      % input the desired case, max load can be 2.4 times 
test=case30(1.37);    % input the desired case, max load can be 1.3 times
% test=case57(1);
% test=case14(2.8);    % input the desired case, max load can be 2.9 times
%test=case118(1);    
sys_b.peak=400;       % Building HVAC peak load value (in KW)
sys_b.cop=3;          % Coefficient of Performance for HVAC System
gk=1;                 % Order for Gear's discretization
hg=10;                % Grid Sampling Time (in seconds)
hb=300;               % Building Sampling Time (in seconds)
z=hb/hg;              % where z is a positive integer
hopf=15*60;           % OPF problem solving frequency (in seconds) 
T_p=15*60;            % Prediction Horizon (in seconds)
days=1;
T_start=(0*3600)+1;           % Simulation Start Time 
T_final=((24*days)-0.25)*3600; % Simulation End Time

%% Adding the required folders to the current Matlab path
currentdirectory=pwd;
try
cd('matpower6.0b1/'); 
matpower_directory=pwd;
cd(currentdirectory); 
addpath(matpower_directory); 
disp('MATPOWER was sucessfully added to the path'); 
catch 
disp('ERROR: unable to find MATPOWER')
end
try
cd('Building Codes/'); 
buildingcodes_directory=pwd;
cd(currentdirectory); 
addpath(buildingcodes_directory); 
disp('Building Codes Folder was sucessfully added to the path'); 
catch 
disp('ERROR: unable to find Building Codes Folder')
end

%% Getting the State Space Matrices for both the systems
[N,Ng,Nb,Nc,buildings,bt]=start();

%% Gear's Discretization Parameters
gear_param(gk);

g_s=(T_p/hg)+1;        % No. of samples of grid dynamics in a prediction horizon = Prediction horizon/sampling time
grid_gear_matrices(hg,gk,N);

b_s=(T_p/hb)+1;        % No. of samples of building dynamics in a prediction horizon = Prediction horizon/sampling time
building_gear_matrices(hb,gk,Nb);

%% Base Load & Building Miscellaneous Loads 
[sys_g.bl,sys_g.umisc]=demand_curve(Nb,test.baseMVA,hg,T_final,days);
sys_g.w_g=[sys_g.bl;sys_g.umisc];

%% Costs and Limits Declaration
for i=1:1:Nc
    if(test.branch(i,6)==0)
%         limit_n.lf(i,1)=100*test.baseMVA;
        limit_n.lf(i,1)=Inf;
    else
        limit_n.lf(i,1)=(1/test.baseMVA)*abs(test.branch(i,6));
    end
end
limit_n.ug_sps_high=(1/test.baseMVA)*test.gen(:,9)*2;
limit_n.ug_sps_low=(1/test.baseMVA)*test.gen(:,10);
costs_and_limits(test,hg,hb,T_p);

%% Generation of Quadprog matrices 

matrices_generator_gonly(N,Nb,Ng,Nc,b_s,g_s,test.baseMVA,z);

% This is for baseline simulation
sys_b.ub=-sys_b.ub*(1000/sys_b.cop);    % Converting +ve KW Cooling Load values to -ve Watts Electrical Loads
Result.B_HVAC=sys_b.ub(:,1:end-2);
opt_ub=Result.B_HVAC(:,1);

% This one is for decoupled problem
% load('building_ip');
% Result.B_HVAC=building_ip;
% opt_ub=Result.B_HVAC(:,1);

%% Main Simulation Begins
xb0=sys_b.init;
xg0=zeros(2*N,1);
% xg0=deg2rad([0;2.441;3.619;-8.063;-12.896;-4.294;-12.807;-6.511;-15.495;zeros(N,1)]);

% xb0=[21.9449610043032;20.3365478470442;21.4041058542859;20.3834269385821;20.3388255137559;20.5827203460787;21.4982433676773;21.5345265991483;21.1884060590364;20.9243839595989;21.7615066292141;21.8832324457342;21.4642918823214;20.5844461680594;21.4696797897860;21.7387685054838;20.2820702469143;20.1341604343668;21.8801100514524;21.2373706995680;21.8268540623391;20.4316112483195;21.4123889340390;21.8875842567102;20.3099855611366;20.7530620731658;20.8259535541810;20.5099543404059;21.3185605175358;21.8123418168629;20.8691226252319;20.2858235286940;21.0947963211729;21.4444518576153;21.7227312699896;20.3880827141450;21.7910654276427;21.6412885659192;21.0268653981033;20.0842759334492;20.5694761279693;21.9264452037370;21.1447064318155;20.6178301649237;21.3648751830188;20.8168246163684;20.5684496909086;20.9863463948496;21.6530918574692;20.1992042622361;20.0851766894908;21.1264124667140;21.9870187050885;20.9625995795988;21.8732760526789;21.7677341938661;20.5690557366761;20.0550903173700;20.8011976927569;21.4749211290490;20.4408267013937;21.9237890091582;21.2578445071953;20.1538719403049;21.0270982069062;21.2354414713978;21.8050795544910;21.0567820167297;21.8846530314433;20.3734993451348;21.1996376273051;21.3063806810096;20.1019697153117;20.2154229799832;21.3312493768725;21.6396295192202;20.6094674530204;21.3156695145741;20.0775100508894;21.5060438952358;20.5492271096330;21.7397407202282;21.9357515135113;21.0062023311300;21.1615289624486;20.9168669974509;20.0835962218888;20.3539532155603;21.2757438063158;21.1952242520962;20.3577557866308;20.2859397229925;21.0896602078507;20.1244087196826;20.4704102071637;20.5231738192108;20.3432426288127;20.5829474951360;20.3414641666425;20.8317585284164;20.8614507605391;20.2611906017219;20.0360617194395;20.3681422516435;20.4710686714136;20.3318653089869;21.6988597060013;21.3001428393395;20.2498312950350;21.7514355036135;21.4257339752959;20.7334379407266;20.4651324343746;21.1008424861934;20.5766287501954;20.4514068025701;21.6745270682130;20.2860516209553;20.7277850095263;21.8784375238969;20.0335631454904;21.7449497280505;21.6919428563704;20.8752494272254;20.2411754063906;21.8262821285116;21.7994028410604;20.8019436153683;21.0949184714981;20.6329790204210;21.8843464072755;21.2944451468025;20.2587110442813;21.5587477471376;20.8301524805416;21.7403811469866;20.1839789709420;21.8512111863541;20.6934399532549;20.0695056621874;21.9368612071956;20.5527697398437;21.5322049926549;21.3251878740446;21.7324265834675;21.3021651084758;21.2111391796387;21.1510578627341;20.0994286816031;21.1808244364937;21.8387463458540;20.3380990858389;20.7513598522613;20.9033078079390;20.5157812244544;21.4288262105098;21.2288277973190;21.3771383697122;21.9954587509977;21.2876545019001;20.1315164786639;20.5116557336253;21.7336573660913;20.3163440329335;21.0633471182308;21.8669694447880;20.6588201497182;21.1454363311769;21.6496531328283;20.1937580357476;21.9002092096145;20.9802792376686;20.5395476672608;20.2622790746056;21.4499715827728;21.0049148164708;20.3857618702993;20.5524769597957;21.8916737632676;21.2614837834623;20.7191451399445;21.0528071979494;21.7741923441508;20.7268041070509;21.3915470227557;21.5731247791794;20.3796785221070;21.3684348296797;21.7267262868114;21.8550518750868;21.6641154795329;20.6451499887354;21.5857577873430;21.3270979253063;21.2333651331339;21.5804424222950;21.7699857346424;20.2076595300079;20.7442936676983;20.4697043027012;20.9853709224842;20.3842752626894;21.9849182546755;20.5188133973142;20.7209261491197;20.2587596303951;20.9643574656193;21.9274283274142;20.1608267660055;21.0739672139875;20.2040557810399;20.5430529913794;21.4687724777978;21.2844637462662;21.9070681673178;20.3454708255838;20.5404989377120;21.0743971429302;20.4437173635354;20.6909975439236;20.0658522414172;20.5694335070742;21.4501380727379;21.0177858485250;21.7670572965976;20.5546580084850;21.0189610806260;21.3410311588304;20.6175493106370;20.1439872900223;20.0143402971764;20.5807299194124;21.6207229577856;21.5996838476065;21.3354624835218;21.8155704074003;21.3910115045940;21.8813417262241;21.0041958196323;20.8176189509499;21.3455618374620;21.3073245762317;20.2954837502411;20.2491002736937;20.8224945338854;21.2514554984875;20.4046885175713;21.6531898754379;20.9010215934348;20.9796250894796;20.5401739343812;21.0405531183380;21.9242855755885;21.3215176790907;21.0499987309683;21.2401861905588;21.0734421153491;21.6026894009220;21.4888773082003;20.8841201201285;21.2092999461829;20.6741258457694;21.9611704996105;21.8430800966710;20.5931937126112;21.6006681049528;20.4922910762244;21.6667732937541;20.3847609691945;21.2569967844277;20.5167048791590;21.4798676469613;20.9636680439138;21.0871713074310;21.2051465543353;21.1863096254288;20.8259703075830;20.3046989095252;20.5568304870168;20.8905157282095;21.8768747982980;21.4110065627803;21.0655911288687;20.8473464695014;20.2360665655866;20.0565828618930;20.8409887170093;21.0966003933550;21.1831076836601;20.0640212449988;21.5627671213976;20.8772679800284;21.3052014458605;21.6523008368688;21.2234897572137;21.0350356907384;21.6443470052732;20.5394658222384;20.9960812150883;21.4192344871567;20.9509915070725;20.9926712033825;21.1991484785800;21.8702550994255;20.6981690498325;21.2255366387616;20.6000866554091;21.0192262330881;21.7132484914017;21.5234291337571;20.7311815985274;21.5314436233496;20.8662122914107;21.3066385305094;20.0056313349489;20.1887358216956;20.9111482409159;20.8952822186954;21.8403302027066;21.2578310551676;21.2086984720123;20.3481786987683;21.4313966280421;21.5974939923337;20.3773749882301;21.9652709535987;20.3247127026189;20.5779551812039;20.1500156221383;21.6386216914769;20.6108184120304;21.3399643182361;20.0258510485434;21.7309052533767;20.3661102792684;20.4329570894055;21.1235729803235;20.9152753279105;21.3220740182761;21.0181901750733;20.9255086716481;21.6505578499325;21.4334787439074;20.7470283446731;21.0615556692449;21.2168305072762;20.7549980713651;21.2273428605031;20.8488542593531;21.1790497835486;21.2905687221760;20.9922517468416;20.4000532845495;21.9388493403363;20.9883145858045;21.2900889198206;20.9005420799235;21.8331745275256;20.6657017529112;20.6554737713002;21.2457945879903;20.1116282674474;21.9532062138180;20.7989495177567;21.2591314773039;21.5006049466425;20.0522504124996;21.4138246527716;21.2778427234312;20.2734666496146;21.9242094086758;20.2607908885666;21.7503820544159;20.6298366849749;21.3355277737333;20.1814854686645;20.4295745405036;21.9756193554560;21.6740030107166;21.7428875311825;21.1461562602774;20.3661878113400;20.0158262848521;21.2438353071909;20.8471134921969;20.9038673468378;20.3285500301691;21.0888254143313;20.6109138050022;21.2119883281526;21.4630039410955;20.8112779134072;20.0233617611838;21.9902290205865;21.4292724169674;21.4608575854901;20.6665348999830;21.3115481582754;20.3970801070768;20.7919509215540;21.7028641291912;21.7461419737283;21.5742241635661;20.6208737569715;21.1995471327957;20.9002437870541;20.0979859091644;20.2953922413639;20.8979828200310;21.7773551561904;21.1757888411508;20.9243843772032;20.8414291872353;21.1932157782501;20.4648173425387;20.2928816561172;21.6805230657866;21.2327610515460;20.6825300436856;20.7279276716168;20.0916593836369;20.5746230052304;21.2220314257134;21.0885826091470;20.1912929691984;21.9952134676013;20.0033560630355;21.3167120078174;20.6999031653494;21.2553038127471;21.3134808624971;20.2939960708652;21.5776044684213;21.4261296914076;21.5287229280537;20.9194815005084;21.0379929533203;20.4287826336506;20.1105870009337;20.2265407872788;20.1646047200342;21.4627243238776;21.3459768157528;20.7654608066549;21.7986404044876;21.6363100951485;21.2555597625163;20.0015325666744;21.8495061643466;20.6747767138016;21.0205287004721;21.3346579123920;20.7659199954634;21.5159858232393;20.0194358437541;20.3199677789430;21.4586693571874;21.5545342927465;21.5080196404188;20.6672385626071;21.5616257871583;21.7128833185442;20.9707533934353;21.9160291656205;21.3833695783383;21.2898467712935;21.2754257935049;21.7786353901145;20.3878432620465;21.8519908292534;20.8517686852877;20.2332466876288;20.2895519611934;20.1552698631352;21.9826572353080;20.8313442825017;20.5999323527186;20.4112684316486;21.1736415213113;21.0726391218117;20.9687554017707;21.2854924716704;20.8242897195192;20.8604397726140;20.5334975152557;21.6527133007009;21.9620052901361;21.3584045522991;21.8152340317193;20.6785048505453;20.2418134762147;21.0101086661214;21.1170356551509;20.5285381590537;21.4458408831338;21.2361023383833;21.7878030893870;20.5557226031815;20.9913075347408;21.4875239832169;21.3929494752048;20.7947321520389;20.9811017804993;20.2852774888403;20.4477656586053;20.8805013164933;20.7955710829045;21.0081424929137;20.0372736391661;20.5446711795871;21.5262120634089;20.2333354936912;21.3748006396380;21.6608469418598;20.1244657183348;21.4906612526189;21.0885234610687;21.0038930091594;21.2207350203456;20.6416435777913;20.5693924052495;20.5605837756562;20.0316083132209;21.6260865188632;20.6442071280845;20.5455333328638;20.8460844125952;21.7987419896355;21.8769731591480;20.7112414873756;21.1673800522675;21.9129320557443;20.7700091592587;21.3350069855627;20.8911162433842;20.8421292737084;20.2014953513148;21.7663374688099;20.5370111392233;20.3888711650396;20.1082697036211;21.1852300337916;21.0468152368317;21.4561152895885;20.9352160751950;21.5320209691119;20.0262402299369;21.6258629071779;21.6522843870884;20.5962882647254;21.5067149697230;21.0680736850990;20.1444756399385;20.8781022695996;21.4947511936461;20.6032367471910;21.5051460064736;21.3242368130325;21.6406527789583;20.0337855603259;21.0603091005434;20.8944373290577;21.3868424692505;21.1316672122944;21.7934276661758;21.8095216132618;21.2391412425268;21.4742725209567;21.1274845783298;20.0124298883571;21.4089083877656;20.2128446383983;20.7872890361405;20.0081848574668;21.8458995530844;20.8214943890894;20.7042846829146;21.7651282366678;20.7668972818608;21.8206282629854;21.6039939012903;21.0834442573405;21.5134819092314;20.5305231763410;21.5407073367283;20.3754899737017;21.7936613489687;21.3472944792343;21.5168396261951;20.3075126646479;20.9991187798447;21.5447570332990;21.5032961600099;21.0676207128264;21.4370075289247;21.1730449894879;20.0446210384883;21.1863885591690;20.3960974182862;21.1553682734771;20.6725338323015;21.1806058353967;21.8710411146837;21.7678989771829;20.4676234159710;21.4204324443613;21.9131150468365;21.3039034407660;20.4698390842526;20.8439487561341;21.1822258580526;21.3792428600617;21.0686964697473;21.8734476322084;20.0942973907468;20.5210411691486;21.5219799740973;20.5374706162909;20.4991117082881;21.5521427228161;20.1927393496169;21.4122115783444;20.2066657391992;20.1794716793925;20.6650927480065;20.6042016150324;21.0344105080447;20.9837106624716;21.2426992935977;20.2646235599808;21.7884436366970;21.0360227478056;21.0879229612041;20.7894272380092;21.0628343203501;20.2679198625063;20.2641687792238;21.2052325987495;20.3239096258590;20.0236280262259;21.2130334065530;21.9655618992185;20.1139193113319;20.2392092738246;21.2226971720734;20.6518417486906;21.9426959771069;20.8783648230006;20.1258236371428;20.0694647623038;20.0399680616516;20.3512004366829;20.7491552673285;20.9550585226268;21.4017971378050;20.7004042955480;21.5143896421928;21.5102279489738;20.0929612013309;20.6017715526661;21.0106406093098;21.8943880968238;21.0563398027508;20.1879949404282;21.2353266398132;21.0645815981905;20.1530648255510;20.3835728201617;21.1802756971227;20.0365382785689;20.1653071098858;21.0790558877905;20.8181176882196;20.1820770697191;20.8477853807392;21.2353752852263;21.2537368836933;20.8408773479456;20.2453833616130;21.2087446825950;21.7742649974288;20.3008715863974;20.7811601511627;21.8949916771909;20.1871037317425;20.8360560605667;20.8683915326131;21.7340622808966;20.4154819949480;21.4707346583835;21.6410023316022;21.7556610268336;21.9076490399241;21.2748073084280;21.3653165194273;20.7740355762365;20.6370226496221;21.0478947779813;20.2921752738260;20.5490600190760;20.9037684087855;20.7063151452007;20.9859946806252;20.3932049529391;21.5626052782139;20.2897307436952;21.2399209376973;21.7155323149451;20.5170686900099;20.0255956818604;21.9057532346969;21.2199781168619;21.2681668393756;21.8054476549854;20.0637574388413;20.1951202727043;20.4301345947712;20.0259798174631;21.6411001658993;20.0254689001337;21.5700613278126;21.3272801250953;20.9832049750501;20.6892611878100;21.2256582340395;20.3217695523198;21.3590528298153;21.8288474374776;20.3007613753961;20.5964659600768;21.5173501838708;20.5377164450805;21.3631306811218;20.5085091488852;21.5162533972572;21.6905368256255;20.9878037461153;21.7345341811899;21.7079725058827;20.6258879435600;20.4447838787103;20.4278255564814;21.4879950530771;20.4473781158259;21.6194207331416;20.8636773318480;20.6632240303557;21.6641083955348;20.6288407415690;21.0856027110740;21.4945721552057;21.3999719137823;21.2653470048649;21.9051677098186;21.8012385999313;21.1315390979808;21.1797571363430;21.0030148569541;21.9470343733752;20.1333376128798;21.5777720827588;21.6045514141663;21.7867639391285;21.8631402295834;21.5373790000419;21.6004814996665;21.1343835427457;21.1454943574225;21.4702618991708;21.7256755942706;21.7433343715330;20.3467633101529;20.0582484359182;21.4166628181521;20.4738357405440;21.0568414784411;20.6280000404921;20.3783867824186;21.3305319987332;20.6248166852760;20.3319619460914;20.8999739212560;20.7895857316296;21.0246285209298;20.8474870710463;20.5775931976436;21.0930410433329;20.7245673241842;21.4565319521534;21.4952255961906;21.1787101258861;21.8186590245642;20.7956052050659;20.3240026840675;20.2972575151332;20.7565892619516;21.6374107473514;20.3980812563504;20.9248466714610;20.9827582456431;21.6759580214829;21.4735841475785;20.1107389994409;20.9714160758492;21.4647556026710;21.6675178570574;20.0404956440982;20.6341098469611;20.7104094810650;20.4950259824186;21.7517955193815;21.3554548736362;20.5670710582055;20.5011734168718;20.7760130910948;21.6559456240137;20.7583371297228;21.7918857475213;21.0163525966746;20.7275652726592;20.6276957805904;20.8319986034786;20.1639187049847;20.9826987174597;20.8082461038547;20.6302826496344;21.7236289437679;21.2426527042666;21.6945125864803;20.6074883783955;21.0127428014193;21.9765237857435;21.9132863157036;21.4799604482368;21.6095174721574;20.3016207703751;20.7625224624907;21.3322597880778;20.2432591190392;20.3826071578856;21.0589716123200;20.5920140842629;20.2707940915237;20.1428018615778;21.6501331369140;21.9194169361471;20.9242329552084;21.3260686515527;20.9311567959809;20.4203899683145;20.5889826742145;20.2192961563030;21.9821885742049;20.9801809333982;20.2426144735187;20.7615741602106;21.0402633989396;21.5768524959312;20.7008314569810;20.5301802256588;21.4897570822753;20.2394415935314;21.3801496236262;20.2148689193021;21.5733760244920;21.9769356099608;21.1379490981787;20.1086977861071;21.5994963645751;21.4663503448430;21.9072784835413;21.6884931221902;21.0161863803945;20.1841595456405;21.7980069094329;21.8908191348400;21.2855647467019;20.7987499023462;21.8761866785283;21.1892094793095;20.4003708632771;21.6988842613126;20.6508156242559;21.1341213010451;20.7149993960262;20.9013317398750;20.6467509265065;20.1473076692391;21.3206287642500;20.4832070883172;20.7887216457526;21.9593321314661;21.4772988586396;20.5064662988341;20.5811999614045;20.7570665790673;20.7826843282557;21.2237909953399;21.1575041092499;21.5862482631378;21.5190430364967;21.8476970481762;21.5579567497996;20.2564821374050;20.5237847852122;20.2546098926174;20.1405553322018;21.0299174248277;20.6913772542500;21.5725407462991;20.5295841542222;20.1944623398911;20.4531715907342;20.2094340886052;20.4773040556680;20.7245333403385;21.0388697558005;20.6284312550910;20.7887156994985;20.9677481934662;20.0130236720712;21.9059642893869;20.9243173268768;21.2492716494333;21.9663866580282;20.5187310353930;20.2408388753636;20.2229259862251;20.4531562068208;20.9703009865227;21.1295664887863;20.1611568285268;21.0087067865640;21.6630513519041;20.1467166397902;21.2005381982802;21.2731380325962;21.2167560681334;21.5882866042681;20.1419386595854;20.3076651991290;20.4956896844561;21.0085977079271;21.5430907042424;20.3912367543926;20.5515622451723;21.6510176587414;20.0710620455065;21.8110829330501;21.0718747031840;21.1056859794676;21.9818613168457;21.5879211238274;20.3256805009101;21.9939876424344;21.4213510097430;20.2625833759012;21.8576474622222;20.5979271088252;20.0021805248238;20.8564748395687;20.0089806873788;21.8060881440915;21.0127805271264;21.5467987110660;21.3971330434477;21.2885331672811;20.5199694365799;21.4512581480144;21.9083470086001;21.0470662035489;21.3552524630989;20.2088257783751;20.1878560701853;20.2056159486209;21.1150343880576;21.3482569416447;21.6227678703758;20.2090766712211;20.4407713912448;21.3110740308230;20.8986926159952;21.8663280072177;20.0758901424043;20.4123900858107;20.9080821891614;20.0908966788773;20.9285942153001;20.8792691976347;20.2998234287268;20.0058199470564;20.9963956443504;20.5822196522844;20.2753085733281];
% xg0=[0.219405396781977;0.0986099769910502;-0.535141115026436;0.0485971907758555;1.88075189332571;1.11554793512069;1.11136760984072;-0.455717390976597;-1.07537743854038;0.937636200468112;-0.208107405244513;-0.369905332232314;0.213901320583966;0.621514029415518;-0.405480259197757;-0.136005356488358;-1.15500056138369;0.928117520916678];

count_tg=((T_start-1)/hg)+1;                     % Counter to keep track of no. of Grid State changes
count_tb=((T_start-1)/hb)+1;                     % Counter to keep track of no. of Building State changes
count_tp=((T_start-1)/T_p)+1;                     % Counter to keep track of no. of Prediction Horizon changes

%Result.B_States(:,1)=xb0;       % Declaring the initial condition in the final result
Result.G_States(:,1)=xg0;       % Declaring the initial condition in the final result
time_prep=toc;                  % Time Elapsed for the data preparation before the actual optimization

tic;
for t=T_start:hg:T_final 
    %tic;
    if (mod(t,T_p)==1)         % Check condition for start of the prediction horizon (of time_predict seconds)
        disp(t);                                % step 4 of Algorithm 1
        
        limit_n.ug_vars_high=0.5*limit_n.ug_sps_high;
        limit_n.ug_vars_low=-0.5*limit_n.ug_sps_high;
        
%         Problem_1(N,Nb,Ng,Nc,b_s,g_s,test.baseMVA,z,count_tg,count_tb,xb0,xg0);
        Problem_1_gonly(N,Nb,Ng,Nc,b_s,g_s,test.baseMVA,z,count_tg,count_tb,xb0,xg0,opt_ub);
        option=optimoptions('quadprog','Algorithm','interior-point-convex');
        
        [X,obj,exitflag] = cplexqp(P1.H,P1.f,P1.Aneq,P1.Bneq,P1.Aeq,...
            P1.Beq,P1.lb,P1.ub,[]);  % calling quadprog to solve Problem Type 1
                
%         separator_1(X,N,Nb,Ng,g_s,b_s,count_tg,count_tb,count_tp);  % Function to segregate the optimisation variable into final result
        separator_1_gonly(X,N,Nb,Ng,g_s,b_s,count_tg,count_tb,count_tp);  % Function to segregate the optimisation variable into final result
        clear X;
        opt_ub=Result.B_HVAC(:,count_tb+1);                        % Optimal HVAC Power for Nb buildings to be used as a constant till the next building state change
        opt_usp=Result.G_usp(:,count_tp);    
        xg0=Result.G_States(:,count_tg+1);
%         xb0=Result.B_States(:,count_tb+1);

%         limit_n.ug_vars_high=limit_n.ug_sps_high - opt_usp;
%         limit_n.ug_vars_low=limit_n.ug_sps_low - opt_usp;
        
        count_tg=count_tg+1;
        count_tb=count_tb+1;
        count_tp=count_tp+1;
        
    elseif (mod(t,hb)==1)         % Check condition for start of the building sampling period
        disp(t);                                % step 14 of Algorithm 1
%         Problem_2(N,Nb,Ng,Nc,b_s,g_s,test.baseMVA,z,count_tg,count_tb,xb0,xg0,opt_usp);
        Problem_3_gonly(N,Nb,Ng,Nc,b_s,g_s,test.baseMVA,z,count_tg,count_tb,xb0,xg0,opt_ub,opt_usp);
        option=optimoptions('quadprog','Algorithm','interior-point-convex');
          
        [X,obj,exitflag] = cplexqp(P3.H,P3.f,[],[],P3.Aeq,...
            P3.Beq,P3.lb,P3.ub,[]);  % calling quadprog to solve Problem Type 1
%         [X,obj,exitflag] = cplexqp(P2.H,P2.f,[],[],P2.Aeq,...
%             P2.Beq,P2.lb,P2.ub,[]);  % calling quadprog to solve Problem Type 1

%         separator_2(X,N,Nb,Ng,g_s,b_s,count_tg,count_tb);  % Function to segregate the optimisation variable into final result
        separator_3(X,N,Nb,Ng,g_s,b_s,count_tg);  % Function to segregate the optimisation variable into final result
        clear X;
        opt_ub=Result.B_HVAC(:,count_tb+1);                        % Optimal HVAC Power for Nb buildings to be used as a constant till the next building state change
%         opt_ub=sys_b.ub(:,count_tb+1);                        % Optimal HVAC Power for Nb buildings to be used as a constant till the next building state change
        xg0=Result.G_States(:,count_tg+1);
%         xb0=Result.B_States(:,count_tb+1);
        count_tg=count_tg+1;
        count_tb=count_tb+1;
        
    else
        disp(t);
%         Problem_3(N,Nb,Ng,Nc,b_s,g_s,test.baseMVA,z,count_tg,count_tb,xb0,xg0,opt_ub,opt_usp);
        Problem_3_gonly(N,Nb,Ng,Nc,b_s,g_s,test.baseMVA,z,count_tg,count_tb,xb0,xg0,opt_ub,opt_usp);
        option=optimoptions('quadprog','Algorithm','interior-point-convex');
          
        [X,obj,exitflag] = cplexqp(P3.H,P3.f,[],[],P3.Aeq,...
            P3.Beq,P3.lb,P3.ub,[]);  % calling quadprog to solve Problem Type 3
        
        separator_3(X,N,Nb,Ng,g_s,b_s,count_tg);  % Function to segregate the optimisation variable into final result
        clear X;
        xg0=Result.G_States(:,count_tg+1);
        count_tg=count_tg+1;
    end
%one_time=toc;
end
time_simulate=toc;                 

%% Plotting the final set of Results
%plot_final_result2(T_final,N,Ng,Nb,hg,hb,T_p,z,g_s,b_s,test.baseMVA);
% plot_final_result(T_final,N,Ng,Nb,hg,hb,T_p,z,g_s,b_s,test.baseMVA);  
plot_final_result_gonly(T_final,N,Ng,Nb,hg,hb,T_p,z,g_s,b_s,test.baseMVA);  
% plot_final_result_gonly_scenario2(T_final,N,Ng,Nb,hg,hb,T_p,z,g_s,b_s,test.baseMVA);  
new_plot_two_fig(N,test.baseMVA,T_final,T_p,hg,Result.G_States,Result.G_ump,Result.G_usp,Result.B_HVAC,sys_b.Tz(:,1:286));
% load('zone_temp.mat');
% new_plot_two_fig(N,test.baseMVA,T_final,T_p,hg,Result.G_States,Result.G_ump,Result.G_usp,Result.B_HVAC,zone_temp);


%% Cost calculation
[objective.freq,objective.ugvar,objective.ugsp,objective.grid,objective.bldg,objective.joint] = calculating_cost_gonly(N,Ng,Nb,hg,hb);

% %% Saving Important results
% save('BTG Results','N','Nb','Ng','Nc','T_final','T_p','time_simulate','Result','limit_n','cost_n','test','sys_g','objective');

